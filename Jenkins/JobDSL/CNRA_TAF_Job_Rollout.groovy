job('cENM_Design_Teams_TAF') {
  description ('cENM Design Team TAF Job - autogenerated using JobDSL - all manual changes will be overwritten!')
  label("${CNRA_TE_Docker_Agents}")
  concurrentBuild(allowConcurrentBuild = true)
  logRotator{
    numToKeep(100)
  }
  wrappers {
    preBuildCleanup()
    timestamps()
    buildName('Cluster ID = \${ENV,var="cluster_id"}')
  }
  parameters{
    stringParam(
      'cluster_id',
      '',
      'The deployment name to run the job against'
    )
    stringParam(
      'taf_profile',
      'maintrack',
      '''By default runs with no profile.<br>Can be given as localinfo or maintrack based on the requirement.'''
    )
    textParam(
      'testware_items',
      '',
      '''Insert your snippets in the format:<br>
<pre>
&lt;item-group parallel=&quot;false&quot;&gt;
    &lt;item timeout-in-seconds=&quot;480&quot;&gt;
        &lt;name&gt;External IdP Authorization Test Sync - Skyfall&lt;/name&gt;
        &lt;component&gt;com.ericsson.oss.itpf.security.sso:ERICTAFsinglesignon-testware_CXP9031665&lt;/component&gt;
        &lt;suites&gt;ExternalIdp_Authorization_TestSync.xml&lt;/suites&gt;
    &lt;/item&gt;
&lt;/item-group&gt;
</pre>'''
    )
    stringParam(
      'taf_version',
      '2.69.1',
      '''The minimum version of TAF that should be used. <br>If you are unsure of what TAF Version to use, check <a href="https://taf.seli.wh.rnd.internal.ericsson.com/">this page</a> for more information.'''
    )
    stringParam(
      'internal_nodes',
      'amos_1,cmserv_1,fmalarmprocessing_1,fmalarmprocessing_2,fmalarmprocessing_3,fmalarmprocessing_4,fmalarmprocessing,fmx_1,fmx_2,itservices_1,itservices-1-internal,jms_1,opendj_1,opendj_2,openidm_0,openidm_1,scripting_1,sps_1',
      '''Enter the value for the parameter <b>taf.config.dit.deployment.internal.nodes</b><br>Options are:<br> amos_1,cmserv_1,fmalarmprocessing_1,fmalarmprocessing_2,fmalarmprocessing_3,fmalarmprocessing_4,fmalarmprocessing,fmx_1,fmx_2,itservices_1,itservices-1-internal,jms_1,opendj_1,opendj_2,openidm_0,openidm_1,scripting_1,sps_1'''
    )
    stringParam(
      'MT_CSV_FILE_URI',
      '',
      '''Enter the value for the MT_CSV_FILE_URI to be used to add nodes for test suites. Automtically populated via the Wrapper job if value not entered'''
    )
  }
  steps {
    shell ('''
#set +x
echo "HOSTNAME=${HOSTNAME}"
httpd_fqdn=$(curl --header 'Accept: application/json' --user METEOTOOL:DppvaPYdnCTwGKBRRf3PaqFS -X GET -ks "https://atvdit.athtem.eei.ericsson.se/api/documents/?q=name=${cluster_id}" | egrep -o "httpd_fqdn.*?" | cut -d '"' -f3)
echo "httpd_fqdn=${httpd_fqdn}" >> build.properties
echo "MT_CSV_FILE_URI=${MT_CSV_FILE_URI}"
    ''')
    envInjectBuilder {
      propertiesFilePath("\${WORKSPACE}/build.properties")
      propertiesContent("")
    }
    baselineDefinedMessageDispatcher {
      ciArtifacts {
        isoProduct("")
        isoDrop("")
        isoVersion("")
        jobType("KGB+N")
        teamName("")
        artifactsClassName("com.ericsson.oss.axis.BaselineDefinedMessageDispatcher\$ArtifactAsPackage\$1")
      }
      armId("")
      downloadRepoName("")
      uploadRepoName("")
      httpString("https://arm1s11-eiffel004.eiffel.gic.ericsson.se:8443/nexus/content/groups/public")
      ftpString("")
      nfsString("")
      armName("")
      armPassword("")
      armDescription("")
      sutClusterId("\${cluster_id}")
      citeHostPropertiesFile("")
      testwarePropertiesFile("")
      schedule {
        xml('''<?xml version="1.0"?>
<schedule xmlns="http://taf.lmera.ericsson.se/schema/te" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://taf.lmera.ericsson.se/schema/te http://taf.lmera.ericsson.se/schema/te/schedule/xml">
    ${testware_items}
</schedule>
        ''')
        testPropertiesAsString(null)
        scheduleClassName('com.ericsson.oss.axis.BaselineDefinedMessageDispatcher\$ScheduleAsXml\$1')
        name(null)
        groupId(null)
        artifactId(null)
        version(null)
        scheduleType(null)
        tafScheduleName(null)
        tafScheduleVersion(null)
      }
      tunnellingOn("true")
      tafVersion("\${taf_version}")
      userDefinedGAVs(null)
      additionalTestProperties('''
          remoteEnmBuilder.command.timeout=60
          node.cbpoi.sync.retries=360
          ui_toolkit.default_browser=FIREFOX
          host.UiTestGrid.port.http=4444
          taf.config.dit.deployment.name=${cluster_id}
          taf.scenario.debug.port=8686
          host.haproxy_0.instance=${httpd_fqdn}
          MT_CSV_FILE_URI=${MT_CSV_FILE_URI}
          host.haproxy_0.port.http=80
          host.haproxy_0.port.https=443
          remoteEnmBuilder.connect.timeout=30
          node.cpp.sync.timeout=8000
          node.cbpoi.sync.timeout=8000
          host.UiTestGrid.user.root.pass=shroot
          node.cpp.sync.retries=360
          jsch.session.connect.timeout=30
          taf.scenario.debug.enabled=true
          private.key.location=/var/tmp/pem_key/${cluster_id}.pem
          taf.config.dit.deployment.internal.nodes=${internal_nodes}
          host.UiTestGrid.user.root.type=ADMIN
          host.haproxy_0.ip=${httpd_fqdn}
          node.comecim.sync.retries=360
          host.${cluster_id}.user.eccd.type=admin
          taf_ui.default_OS=LINUX
          node.sync.repeat=360
          host.UiTestGrid.type=SELENIUM_GRID
          host.${cluster_id}.port.ssh=22
          deployment.type=cloud
          cloud.public.vm=client_machine
          taf.profiles=${taf_profile}
          host.UiTestGrid.ip=141.137.173.252
          host.UiTestGrid.port.ssh=22
          ENMUrl=${httpd_fqdn}
          node.comecim.sync.timeout=8000
          ''')
      breakBuildOnTestsFailure("true")
      ciFwkHost("https://ci-portal.seli.wh.rnd.internal.ericsson.com/")
      tafTestExecutorHostname("")
      tafTestExecutorPort("8080")
      globalTestGroups("")
    }
  }
}
